name: Run CI

on:
  push:
    branches:
      - "**"

  pull_request:
    branches:
      - "**"

jobs:
  style:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: uv tool install tox --with tox-uv

      - name: Check style
        run:
          tox -e black

  shell-linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install shell check
        run: sudo apt-get install -y shellcheck
      - name: Run shellcheck
        run: ./scripts/check_shell_style.sh

  types:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install tox
        run: uv tool install tox --with tox-uv

      - name: Check types
        run:
          tox -e mypy

  npm-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3

      - name: Check npm build
        run:
          cd fighthealthinsurance/static/js && npm i && npm run build && npm cache clean --force


  tests-sync:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python: ['3.10']
        django: ['50']
        include:
          - python: '3.10'
            django: '50'

    name: Run the sync test suite (Python ${{ matrix.python }}, Django ${{ matrix.django }})
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v3

      - name: Install system level packages
        run: sudo apt-get update && sudo apt-get install -y tesseract-ocr texlive && sudo apt-get clean

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install tox
        run: uv tool install tox --with tox-uv

      - name: Install pandoc
        uses: pandoc/actions/setup@v1
        with:
          version: 2.19

      - name: Build npm js (needed for the e2e tests in django)
        run:
          cd fighthealthinsurance/static/js && npm i && npm run build && npm cache clean --force

      - name: Run tests
        run: tox -e py${{ matrix.python }}-django${{ matrix.django }}-sync
        env:
          FARTS: "farts"
          GOOGLE_CLIENT_SECRETS_TEXT: ${{ secrets.GOOGLE_CLIENT_SECRETS_TEXT }}
          STRIPE_TEST_SECRET_KEY: ${{ secrets.STRIPE_TEST_SECRET_KEY }}

  build-docker-ray-container:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    name: Build the docker ray containers
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Run ray docker build
        run:
          ./scripts/build_ray.sh
        env:
          BUILDX_CMD: "load"
          FHI_VERSION: "ci"
          PLATFORM: linux/amd64

  build-docker-django-container:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    name: Build the docker django containers
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      - name: Install our build env
        run:
          pwd && uv venv build_venv --python python3.11 && source build_venv/bin/activate && uv pip install -r requirements.txt
      - name: Run build the templates
        run:
          ./scripts/setup_templates.sh
      - name: Run django docker build
        run:
          ./scripts/build_django.sh
        env:
          BUILDX_CMD: "load"
          FHI_VERSION: "ci"
          PLATFORM: linux/amd64

  tests-async:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python: ['3.10']
        django: ['50']
        include:
          - python: '3.10'
            django: '50'

    name: Run the async test suite (Python ${{ matrix.python }}, Django ${{ matrix.django }})
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v3

      - name: Install system level packages
        run: sudo apt-get update && sudo apt-get install -y tesseract-ocr texlive && sudo apt-get clean

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install tox
        run: uv tool install tox --with tox-uv

      - name: Install pandoc
        uses: pandoc/actions/setup@v1
        with:
          version: 2.19

      - name: Build npm js (needed for the e2e tests in django)
        run:
          cd fighthealthinsurance/static/js && npm i && npm run build && npm cache clean --force

      - name: Setup DB (long story)
        run: uv venv && source .venv/bin/activate && uv pip install -r requirements.txt && python manage.py makemigrations && python manage.py migrate && ENVIRONMENT=Test ./manage.py migrate

      - name: Run tests
        run: ENVIRONMENT=Test tox -e py${{ matrix.python }}-django${{ matrix.django }}-async
        env:
          FARTS: "farts"
          GOOGLE_CLIENT_SECRETS_TEXT: ${{ secrets.GOOGLE_CLIENT_SECRETS_TEXT }}
          STRIPE_TEST_SECRET_KEY: ${{ secrets.STRIPE_TEST_SECRET_KEY }}
          NOSTRIPE: true
